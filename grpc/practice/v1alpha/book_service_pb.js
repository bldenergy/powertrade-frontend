// source: practice/v1alpha/book_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.bldenergy.practice.v1alpha.Book', null, global);
goog.exportSymbol('proto.bldenergy.practice.v1alpha.GetBookRequest', null, global);
goog.exportSymbol('proto.bldenergy.practice.v1alpha.HealthCheckRequest', null, global);
goog.exportSymbol('proto.bldenergy.practice.v1alpha.HealthCheckResponse', null, global);
goog.exportSymbol('proto.bldenergy.practice.v1alpha.HealthCheckResponse.ServingStatus', null, global);
goog.exportSymbol('proto.bldenergy.practice.v1alpha.LivenessRequest', null, global);
goog.exportSymbol('proto.bldenergy.practice.v1alpha.LivenessResponse', null, global);
goog.exportSymbol('proto.bldenergy.practice.v1alpha.QueryBooksRequest', null, global);
goog.exportSymbol('proto.bldenergy.practice.v1alpha.ReadinessRequest', null, global);
goog.exportSymbol('proto.bldenergy.practice.v1alpha.ReadinessResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bldenergy.practice.v1alpha.Book = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bldenergy.practice.v1alpha.Book, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bldenergy.practice.v1alpha.Book.displayName = 'proto.bldenergy.practice.v1alpha.Book';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bldenergy.practice.v1alpha.GetBookRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bldenergy.practice.v1alpha.GetBookRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bldenergy.practice.v1alpha.GetBookRequest.displayName = 'proto.bldenergy.practice.v1alpha.GetBookRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bldenergy.practice.v1alpha.QueryBooksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bldenergy.practice.v1alpha.QueryBooksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bldenergy.practice.v1alpha.QueryBooksRequest.displayName = 'proto.bldenergy.practice.v1alpha.QueryBooksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bldenergy.practice.v1alpha.HealthCheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bldenergy.practice.v1alpha.HealthCheckRequest.displayName = 'proto.bldenergy.practice.v1alpha.HealthCheckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bldenergy.practice.v1alpha.HealthCheckResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bldenergy.practice.v1alpha.HealthCheckResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bldenergy.practice.v1alpha.HealthCheckResponse.displayName = 'proto.bldenergy.practice.v1alpha.HealthCheckResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bldenergy.practice.v1alpha.LivenessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bldenergy.practice.v1alpha.LivenessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bldenergy.practice.v1alpha.LivenessRequest.displayName = 'proto.bldenergy.practice.v1alpha.LivenessRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bldenergy.practice.v1alpha.LivenessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bldenergy.practice.v1alpha.LivenessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bldenergy.practice.v1alpha.LivenessResponse.displayName = 'proto.bldenergy.practice.v1alpha.LivenessResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bldenergy.practice.v1alpha.ReadinessRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bldenergy.practice.v1alpha.ReadinessRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bldenergy.practice.v1alpha.ReadinessRequest.displayName = 'proto.bldenergy.practice.v1alpha.ReadinessRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bldenergy.practice.v1alpha.ReadinessResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bldenergy.practice.v1alpha.ReadinessResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bldenergy.practice.v1alpha.ReadinessResponse.displayName = 'proto.bldenergy.practice.v1alpha.ReadinessResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bldenergy.practice.v1alpha.Book.prototype.toObject = function(opt_includeInstance) {
  return proto.bldenergy.practice.v1alpha.Book.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bldenergy.practice.v1alpha.Book} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.Book.toObject = function(includeInstance, msg) {
  var f, obj = {
    isbn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    author: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bldenergy.practice.v1alpha.Book}
 */
proto.bldenergy.practice.v1alpha.Book.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bldenergy.practice.v1alpha.Book;
  return proto.bldenergy.practice.v1alpha.Book.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bldenergy.practice.v1alpha.Book} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bldenergy.practice.v1alpha.Book}
 */
proto.bldenergy.practice.v1alpha.Book.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsbn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bldenergy.practice.v1alpha.Book.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bldenergy.practice.v1alpha.Book.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bldenergy.practice.v1alpha.Book} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.Book.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsbn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string isbn = 1;
 * @return {string}
 */
proto.bldenergy.practice.v1alpha.Book.prototype.getIsbn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bldenergy.practice.v1alpha.Book} returns this
 */
proto.bldenergy.practice.v1alpha.Book.prototype.setIsbn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.bldenergy.practice.v1alpha.Book.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bldenergy.practice.v1alpha.Book} returns this
 */
proto.bldenergy.practice.v1alpha.Book.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string author = 3;
 * @return {string}
 */
proto.bldenergy.practice.v1alpha.Book.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.bldenergy.practice.v1alpha.Book} returns this
 */
proto.bldenergy.practice.v1alpha.Book.prototype.setAuthor = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bldenergy.practice.v1alpha.GetBookRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bldenergy.practice.v1alpha.GetBookRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bldenergy.practice.v1alpha.GetBookRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.GetBookRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    isbn: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bldenergy.practice.v1alpha.GetBookRequest}
 */
proto.bldenergy.practice.v1alpha.GetBookRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bldenergy.practice.v1alpha.GetBookRequest;
  return proto.bldenergy.practice.v1alpha.GetBookRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bldenergy.practice.v1alpha.GetBookRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bldenergy.practice.v1alpha.GetBookRequest}
 */
proto.bldenergy.practice.v1alpha.GetBookRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsbn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bldenergy.practice.v1alpha.GetBookRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bldenergy.practice.v1alpha.GetBookRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bldenergy.practice.v1alpha.GetBookRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.GetBookRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsbn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string isbn = 1;
 * @return {string}
 */
proto.bldenergy.practice.v1alpha.GetBookRequest.prototype.getIsbn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bldenergy.practice.v1alpha.GetBookRequest} returns this
 */
proto.bldenergy.practice.v1alpha.GetBookRequest.prototype.setIsbn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bldenergy.practice.v1alpha.QueryBooksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bldenergy.practice.v1alpha.QueryBooksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bldenergy.practice.v1alpha.QueryBooksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.QueryBooksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorPrefix: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bldenergy.practice.v1alpha.QueryBooksRequest}
 */
proto.bldenergy.practice.v1alpha.QueryBooksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bldenergy.practice.v1alpha.QueryBooksRequest;
  return proto.bldenergy.practice.v1alpha.QueryBooksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bldenergy.practice.v1alpha.QueryBooksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bldenergy.practice.v1alpha.QueryBooksRequest}
 */
proto.bldenergy.practice.v1alpha.QueryBooksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bldenergy.practice.v1alpha.QueryBooksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bldenergy.practice.v1alpha.QueryBooksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bldenergy.practice.v1alpha.QueryBooksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.QueryBooksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorPrefix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string author_prefix = 1;
 * @return {string}
 */
proto.bldenergy.practice.v1alpha.QueryBooksRequest.prototype.getAuthorPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bldenergy.practice.v1alpha.QueryBooksRequest} returns this
 */
proto.bldenergy.practice.v1alpha.QueryBooksRequest.prototype.setAuthorPrefix = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bldenergy.practice.v1alpha.HealthCheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bldenergy.practice.v1alpha.HealthCheckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bldenergy.practice.v1alpha.HealthCheckRequest}
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bldenergy.practice.v1alpha.HealthCheckRequest;
  return proto.bldenergy.practice.v1alpha.HealthCheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bldenergy.practice.v1alpha.HealthCheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bldenergy.practice.v1alpha.HealthCheckRequest}
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bldenergy.practice.v1alpha.HealthCheckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bldenergy.practice.v1alpha.HealthCheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string service = 1;
 * @return {string}
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.bldenergy.practice.v1alpha.HealthCheckRequest} returns this
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest.prototype.setService = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bldenergy.practice.v1alpha.HealthCheckRequest} returns this
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest.prototype.clearService = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bldenergy.practice.v1alpha.HealthCheckRequest.prototype.hasService = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bldenergy.practice.v1alpha.HealthCheckResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bldenergy.practice.v1alpha.HealthCheckResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bldenergy.practice.v1alpha.HealthCheckResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.HealthCheckResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bldenergy.practice.v1alpha.HealthCheckResponse}
 */
proto.bldenergy.practice.v1alpha.HealthCheckResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bldenergy.practice.v1alpha.HealthCheckResponse;
  return proto.bldenergy.practice.v1alpha.HealthCheckResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bldenergy.practice.v1alpha.HealthCheckResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bldenergy.practice.v1alpha.HealthCheckResponse}
 */
proto.bldenergy.practice.v1alpha.HealthCheckResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.bldenergy.practice.v1alpha.HealthCheckResponse.ServingStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bldenergy.practice.v1alpha.HealthCheckResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bldenergy.practice.v1alpha.HealthCheckResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bldenergy.practice.v1alpha.HealthCheckResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.HealthCheckResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.bldenergy.practice.v1alpha.HealthCheckResponse.ServingStatus = {
  SERVING_STATUS_UNSPECIFIED: 0,
  SERVING_STATUS_SERVING: 1,
  SERVING_STATUS_NOT_SERVING: 2
};

/**
 * optional ServingStatus status = 1;
 * @return {!proto.bldenergy.practice.v1alpha.HealthCheckResponse.ServingStatus}
 */
proto.bldenergy.practice.v1alpha.HealthCheckResponse.prototype.getStatus = function() {
  return /** @type {!proto.bldenergy.practice.v1alpha.HealthCheckResponse.ServingStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.bldenergy.practice.v1alpha.HealthCheckResponse.ServingStatus} value
 * @return {!proto.bldenergy.practice.v1alpha.HealthCheckResponse} returns this
 */
proto.bldenergy.practice.v1alpha.HealthCheckResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bldenergy.practice.v1alpha.LivenessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bldenergy.practice.v1alpha.LivenessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bldenergy.practice.v1alpha.LivenessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.LivenessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    healthCheckRequest: (f = msg.getHealthCheckRequest()) && proto.bldenergy.practice.v1alpha.HealthCheckRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bldenergy.practice.v1alpha.LivenessRequest}
 */
proto.bldenergy.practice.v1alpha.LivenessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bldenergy.practice.v1alpha.LivenessRequest;
  return proto.bldenergy.practice.v1alpha.LivenessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bldenergy.practice.v1alpha.LivenessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bldenergy.practice.v1alpha.LivenessRequest}
 */
proto.bldenergy.practice.v1alpha.LivenessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bldenergy.practice.v1alpha.HealthCheckRequest;
      reader.readMessage(value,proto.bldenergy.practice.v1alpha.HealthCheckRequest.deserializeBinaryFromReader);
      msg.setHealthCheckRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bldenergy.practice.v1alpha.LivenessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bldenergy.practice.v1alpha.LivenessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bldenergy.practice.v1alpha.LivenessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.LivenessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealthCheckRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bldenergy.practice.v1alpha.HealthCheckRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional HealthCheckRequest health_check_request = 1;
 * @return {?proto.bldenergy.practice.v1alpha.HealthCheckRequest}
 */
proto.bldenergy.practice.v1alpha.LivenessRequest.prototype.getHealthCheckRequest = function() {
  return /** @type{?proto.bldenergy.practice.v1alpha.HealthCheckRequest} */ (
    jspb.Message.getWrapperField(this, proto.bldenergy.practice.v1alpha.HealthCheckRequest, 1));
};


/**
 * @param {?proto.bldenergy.practice.v1alpha.HealthCheckRequest|undefined} value
 * @return {!proto.bldenergy.practice.v1alpha.LivenessRequest} returns this
*/
proto.bldenergy.practice.v1alpha.LivenessRequest.prototype.setHealthCheckRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bldenergy.practice.v1alpha.LivenessRequest} returns this
 */
proto.bldenergy.practice.v1alpha.LivenessRequest.prototype.clearHealthCheckRequest = function() {
  return this.setHealthCheckRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bldenergy.practice.v1alpha.LivenessRequest.prototype.hasHealthCheckRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bldenergy.practice.v1alpha.LivenessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bldenergy.practice.v1alpha.LivenessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bldenergy.practice.v1alpha.LivenessResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.LivenessResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    healthCheckResponse: (f = msg.getHealthCheckResponse()) && proto.bldenergy.practice.v1alpha.HealthCheckResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bldenergy.practice.v1alpha.LivenessResponse}
 */
proto.bldenergy.practice.v1alpha.LivenessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bldenergy.practice.v1alpha.LivenessResponse;
  return proto.bldenergy.practice.v1alpha.LivenessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bldenergy.practice.v1alpha.LivenessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bldenergy.practice.v1alpha.LivenessResponse}
 */
proto.bldenergy.practice.v1alpha.LivenessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bldenergy.practice.v1alpha.HealthCheckResponse;
      reader.readMessage(value,proto.bldenergy.practice.v1alpha.HealthCheckResponse.deserializeBinaryFromReader);
      msg.setHealthCheckResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bldenergy.practice.v1alpha.LivenessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bldenergy.practice.v1alpha.LivenessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bldenergy.practice.v1alpha.LivenessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.LivenessResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealthCheckResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bldenergy.practice.v1alpha.HealthCheckResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional HealthCheckResponse health_check_response = 1;
 * @return {?proto.bldenergy.practice.v1alpha.HealthCheckResponse}
 */
proto.bldenergy.practice.v1alpha.LivenessResponse.prototype.getHealthCheckResponse = function() {
  return /** @type{?proto.bldenergy.practice.v1alpha.HealthCheckResponse} */ (
    jspb.Message.getWrapperField(this, proto.bldenergy.practice.v1alpha.HealthCheckResponse, 1));
};


/**
 * @param {?proto.bldenergy.practice.v1alpha.HealthCheckResponse|undefined} value
 * @return {!proto.bldenergy.practice.v1alpha.LivenessResponse} returns this
*/
proto.bldenergy.practice.v1alpha.LivenessResponse.prototype.setHealthCheckResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bldenergy.practice.v1alpha.LivenessResponse} returns this
 */
proto.bldenergy.practice.v1alpha.LivenessResponse.prototype.clearHealthCheckResponse = function() {
  return this.setHealthCheckResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bldenergy.practice.v1alpha.LivenessResponse.prototype.hasHealthCheckResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bldenergy.practice.v1alpha.ReadinessRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bldenergy.practice.v1alpha.ReadinessRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bldenergy.practice.v1alpha.ReadinessRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.ReadinessRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    healthCheckRequest: (f = msg.getHealthCheckRequest()) && proto.bldenergy.practice.v1alpha.HealthCheckRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bldenergy.practice.v1alpha.ReadinessRequest}
 */
proto.bldenergy.practice.v1alpha.ReadinessRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bldenergy.practice.v1alpha.ReadinessRequest;
  return proto.bldenergy.practice.v1alpha.ReadinessRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bldenergy.practice.v1alpha.ReadinessRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bldenergy.practice.v1alpha.ReadinessRequest}
 */
proto.bldenergy.practice.v1alpha.ReadinessRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bldenergy.practice.v1alpha.HealthCheckRequest;
      reader.readMessage(value,proto.bldenergy.practice.v1alpha.HealthCheckRequest.deserializeBinaryFromReader);
      msg.setHealthCheckRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bldenergy.practice.v1alpha.ReadinessRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bldenergy.practice.v1alpha.ReadinessRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bldenergy.practice.v1alpha.ReadinessRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.ReadinessRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealthCheckRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bldenergy.practice.v1alpha.HealthCheckRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional HealthCheckRequest health_check_request = 1;
 * @return {?proto.bldenergy.practice.v1alpha.HealthCheckRequest}
 */
proto.bldenergy.practice.v1alpha.ReadinessRequest.prototype.getHealthCheckRequest = function() {
  return /** @type{?proto.bldenergy.practice.v1alpha.HealthCheckRequest} */ (
    jspb.Message.getWrapperField(this, proto.bldenergy.practice.v1alpha.HealthCheckRequest, 1));
};


/**
 * @param {?proto.bldenergy.practice.v1alpha.HealthCheckRequest|undefined} value
 * @return {!proto.bldenergy.practice.v1alpha.ReadinessRequest} returns this
*/
proto.bldenergy.practice.v1alpha.ReadinessRequest.prototype.setHealthCheckRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bldenergy.practice.v1alpha.ReadinessRequest} returns this
 */
proto.bldenergy.practice.v1alpha.ReadinessRequest.prototype.clearHealthCheckRequest = function() {
  return this.setHealthCheckRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bldenergy.practice.v1alpha.ReadinessRequest.prototype.hasHealthCheckRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bldenergy.practice.v1alpha.ReadinessResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.bldenergy.practice.v1alpha.ReadinessResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bldenergy.practice.v1alpha.ReadinessResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.ReadinessResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    healthCheckResponse: (f = msg.getHealthCheckResponse()) && proto.bldenergy.practice.v1alpha.HealthCheckResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bldenergy.practice.v1alpha.ReadinessResponse}
 */
proto.bldenergy.practice.v1alpha.ReadinessResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bldenergy.practice.v1alpha.ReadinessResponse;
  return proto.bldenergy.practice.v1alpha.ReadinessResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bldenergy.practice.v1alpha.ReadinessResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bldenergy.practice.v1alpha.ReadinessResponse}
 */
proto.bldenergy.practice.v1alpha.ReadinessResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bldenergy.practice.v1alpha.HealthCheckResponse;
      reader.readMessage(value,proto.bldenergy.practice.v1alpha.HealthCheckResponse.deserializeBinaryFromReader);
      msg.setHealthCheckResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bldenergy.practice.v1alpha.ReadinessResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bldenergy.practice.v1alpha.ReadinessResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bldenergy.practice.v1alpha.ReadinessResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bldenergy.practice.v1alpha.ReadinessResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHealthCheckResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bldenergy.practice.v1alpha.HealthCheckResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional HealthCheckResponse health_check_response = 1;
 * @return {?proto.bldenergy.practice.v1alpha.HealthCheckResponse}
 */
proto.bldenergy.practice.v1alpha.ReadinessResponse.prototype.getHealthCheckResponse = function() {
  return /** @type{?proto.bldenergy.practice.v1alpha.HealthCheckResponse} */ (
    jspb.Message.getWrapperField(this, proto.bldenergy.practice.v1alpha.HealthCheckResponse, 1));
};


/**
 * @param {?proto.bldenergy.practice.v1alpha.HealthCheckResponse|undefined} value
 * @return {!proto.bldenergy.practice.v1alpha.ReadinessResponse} returns this
*/
proto.bldenergy.practice.v1alpha.ReadinessResponse.prototype.setHealthCheckResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.bldenergy.practice.v1alpha.ReadinessResponse} returns this
 */
proto.bldenergy.practice.v1alpha.ReadinessResponse.prototype.clearHealthCheckResponse = function() {
  return this.setHealthCheckResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bldenergy.practice.v1alpha.ReadinessResponse.prototype.hasHealthCheckResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.bldenergy.practice.v1alpha);

// source: powertrade/powerusage/v1alpha/powerusage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.ChannelUsage', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.DeviceUsage', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.GetHistoricalRequest', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.GetHistoricalResponse', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.GetRealtimeRequest', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.GetRealtimeResponse', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.Granularity', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.ListHistoricalRequest', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.ListHistoricalResponse', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.ListRealtimeRequest', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.ListRealtimeResponse', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.MeterUsage', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.Scale', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.DeviceUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.DeviceUsage.displayName = 'proto.powertrade.powerusage.v1alpha.DeviceUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.displayName = 'proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.displayName = 'proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.ChannelUsage.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.ChannelUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.ChannelUsage.displayName = 'proto.powertrade.powerusage.v1alpha.ChannelUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.displayName = 'proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.displayName = 'proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.MeterUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.MeterUsage.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.MeterUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.MeterUsage.displayName = 'proto.powertrade.powerusage.v1alpha.MeterUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.displayName = 'proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.displayName = 'proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.GetHistoricalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.displayName = 'proto.powertrade.powerusage.v1alpha.GetHistoricalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.GetHistoricalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.displayName = 'proto.powertrade.powerusage.v1alpha.GetHistoricalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.displayName = 'proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.displayName = 'proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.ListHistoricalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.displayName = 'proto.powertrade.powerusage.v1alpha.ListHistoricalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.ListHistoricalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.displayName = 'proto.powertrade.powerusage.v1alpha.ListHistoricalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.displayName = 'proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.displayName = 'proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.GetRealtimeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.displayName = 'proto.powertrade.powerusage.v1alpha.GetRealtimeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.GetRealtimeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.displayName = 'proto.powertrade.powerusage.v1alpha.GetRealtimeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.ListRealtimeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.ListRealtimeRequest.displayName = 'proto.powertrade.powerusage.v1alpha.ListRealtimeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.ListRealtimeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.displayName = 'proto.powertrade.powerusage.v1alpha.ListRealtimeResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.DeviceUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.DeviceUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    watt: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.DeviceUsage}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.DeviceUsage;
  return proto.powertrade.powerusage.v1alpha.DeviceUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.DeviceUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.DeviceUsage}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWatt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.DeviceUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.DeviceUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWatt();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.DeviceUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float watt = 2;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.getWatt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.DeviceUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.setWatt = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wattList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage}
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage;
  return proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage}
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addWatt(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWattList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated float watt = 2;
 * @return {!Array<number>}
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.prototype.getWattList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.prototype.setWattList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.prototype.addWatt = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.prototype.clearWattList = function() {
  return this.setWattList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    wattList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt}
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt;
  return proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt}
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addWatt(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWattList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated float watt = 2;
 * @return {!Array<number>}
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.prototype.getWattList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.prototype.setWattList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.prototype.addWatt = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.prototype.clearWattList = function() {
  return this.setWattList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.ChannelUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.ChannelUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.powertrade.powerusage.v1alpha.DeviceUsage.toObject, includeInstance),
    watt: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.ChannelUsage;
  return proto.powertrade.powerusage.v1alpha.ChannelUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.ChannelUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 2:
      var value = new proto.powertrade.powerusage.v1alpha.DeviceUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.DeviceUsage.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWatt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.ChannelUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.ChannelUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.powertrade.powerusage.v1alpha.DeviceUsage.serializeBinaryToWriter
    );
  }
  f = message.getWatt();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated DeviceUsage devices = 2;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.DeviceUsage>}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.DeviceUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.DeviceUsage, 2));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.DeviceUsage>} value
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage} returns this
*/
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.setDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.DeviceUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.DeviceUsage}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.powertrade.powerusage.v1alpha.DeviceUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};


/**
 * optional float watt = 3;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.getWatt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.setWatt = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.toObject, includeInstance),
    wattList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage}
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage;
  return proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage}
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 2:
      var value = new proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addWatt(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage.serializeBinaryToWriter
    );
  }
  f = message.getWattList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated HistoricalDeviceUsage devices = 2;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage>}
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage, 2));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage>} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage} returns this
*/
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.setDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage}
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.powertrade.powerusage.v1alpha.HistoricalDeviceUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};


/**
 * repeated float watt = 3;
 * @return {!Array<number>}
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.getWattList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.setWattList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.addWatt = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.prototype.clearWattList = function() {
  return this.setWattList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.toObject, includeInstance),
    wattList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt}
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt;
  return proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt}
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 2:
      var value = new proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addWatt(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt.serializeBinaryToWriter
    );
  }
  f = message.getWattList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated StatisticalDeviceWatt devices = 2;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt>}
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt, 2));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt>} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt} returns this
*/
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.setDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt}
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.powertrade.powerusage.v1alpha.StatisticalDeviceWatt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};


/**
 * repeated float watt = 3;
 * @return {!Array<number>}
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.getWattList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.setWattList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.addWatt = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.prototype.clearWattList = function() {
  return this.setWattList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.MeterUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.MeterUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    voltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    frequency: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.powertrade.powerusage.v1alpha.ChannelUsage.toObject, includeInstance),
    watt: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    epoch: (f = msg.getEpoch()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.MeterUsage;
  return proto.powertrade.powerusage.v1alpha.MeterUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.MeterUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFrequency(value);
      break;
    case 6:
      var value = new proto.powertrade.powerusage.v1alpha.ChannelUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.ChannelUsage.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWatt(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.MeterUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.MeterUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.powertrade.powerusage.v1alpha.ChannelUsage.serializeBinaryToWriter
    );
  }
  f = message.getWatt();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getEpoch();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float voltage = 4;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float frequency = 5;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setFrequency = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * repeated ChannelUsage channels = 6;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.ChannelUsage>}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.ChannelUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.ChannelUsage, 6));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.ChannelUsage>} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
*/
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.ChannelUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.powertrade.powerusage.v1alpha.ChannelUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.clearChannelsList = function() {
  return this.setChannelsList([]);
};


/**
 * optional float watt = 7;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getWatt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setWatt = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp epoch = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getEpoch = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
*/
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setEpoch = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.clearEpoch = function() {
  return this.setEpoch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.hasEpoch = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.repeatedFields_ = [4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    voltageList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 4)) == null ? undefined : f,
    frequencyList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.toObject, includeInstance),
    wattList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    epoch: (f = msg.getEpoch()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage;
  return proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVoltage(values[i]);
      }
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFrequency(values[i]);
      }
      break;
    case 6:
      var value = new proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addWatt(values[i]);
      }
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVoltageList();
  if (f.length > 0) {
    writer.writePackedFloat(
      4,
      f
    );
  }
  f = message.getFrequencyList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage.serializeBinaryToWriter
    );
  }
  f = message.getWattList();
  if (f.length > 0) {
    writer.writePackedFloat(
      7,
      f
    );
  }
  f = message.getEpoch();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated float voltage = 4;
 * @return {!Array<number>}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.getVoltageList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.setVoltageList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.addVoltage = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.clearVoltageList = function() {
  return this.setVoltageList([]);
};


/**
 * repeated float frequency = 5;
 * @return {!Array<number>}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.getFrequencyList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.setFrequencyList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.addFrequency = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.clearFrequencyList = function() {
  return this.setFrequencyList([]);
};


/**
 * repeated HistoricalChannelUsage channels = 6;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage>}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage, 6));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage>} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
*/
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.setChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.powertrade.powerusage.v1alpha.HistoricalChannelUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.clearChannelsList = function() {
  return this.setChannelsList([]);
};


/**
 * repeated float watt = 7;
 * @return {!Array<number>}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.getWattList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.setWattList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.addWatt = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.clearWattList = function() {
  return this.setWattList([]);
};


/**
 * optional google.protobuf.Timestamp epoch = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.getEpoch = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
*/
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.setEpoch = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.clearEpoch = function() {
  return this.setEpoch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.prototype.hasEpoch = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.toObject, includeInstance),
    wattList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    epoch: (f = msg.getEpoch()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt;
  return proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = new proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addWatt(values[i]);
      }
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt.serializeBinaryToWriter
    );
  }
  f = message.getWattList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getEpoch();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated StatisticalChannelWatt channels = 4;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt>}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt, 4));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt>} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} returns this
*/
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.setChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.powertrade.powerusage.v1alpha.StatisticalChannelWatt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.clearChannelsList = function() {
  return this.setChannelsList([]);
};


/**
 * repeated float watt = 5;
 * @return {!Array<number>}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.getWattList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.setWattList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.addWatt = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.clearWattList = function() {
  return this.setWattList([]);
};


/**
 * optional google.protobuf.Timestamp epoch = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.getEpoch = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} returns this
*/
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.setEpoch = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} returns this
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.clearEpoch = function() {
  return this.setEpoch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.prototype.hasEpoch = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.GetHistoricalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    frames: jspb.Message.getFieldWithDefault(msg, 1, 0),
    granularity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalRequest}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.GetHistoricalRequest;
  return proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.GetHistoricalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalRequest}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrames(value);
      break;
    case 2:
      var value = /** @type {!proto.powertrade.powerusage.v1alpha.Granularity} */ (reader.readEnum());
      msg.setGranularity(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.GetHistoricalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrames();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGranularity();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 frames = 1;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.getFrames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.setFrames = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Granularity granularity = 2;
 * @return {!proto.powertrade.powerusage.v1alpha.Granularity}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.getGranularity = function() {
  return /** @type {!proto.powertrade.powerusage.v1alpha.Granularity} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.Granularity} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.setGranularity = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp start = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalRequest} returns this
*/
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.hasStart = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.GetHistoricalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meter: (f = msg.getMeter()) && proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalResponse}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.GetHistoricalResponse;
  return proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.GetHistoricalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalResponse}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.deserializeBinaryFromReader);
      msg.setMeter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.GetHistoricalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.serializeBinaryToWriter
    );
  }
};


/**
 * optional HistoricalMeterUsage meter = 1;
 * @return {?proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.prototype.getMeter = function() {
  return /** @type{?proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage} */ (
    jspb.Message.getWrapperField(this, proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage, 1));
};


/**
 * @param {?proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalResponse} returns this
*/
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.prototype.setMeter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.GetHistoricalResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.prototype.clearMeter = function() {
  return this.setMeter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.GetHistoricalResponse.prototype.hasMeter = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scale: jspb.Message.getFieldWithDefault(msg, 1, 0),
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest;
  return proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.powertrade.powerusage.v1alpha.Scale} */ (reader.readEnum());
      msg.setScale(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScale();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Scale scale = 1;
 * @return {!proto.powertrade.powerusage.v1alpha.Scale}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.prototype.getScale = function() {
  return /** @type {!proto.powertrade.powerusage.v1alpha.Scale} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.Scale} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.prototype.setScale = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp start = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest} returns this
*/
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.prototype.hasStart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meter: (f = msg.getMeter()) && proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse;
  return proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.deserializeBinaryFromReader);
      msg.setMeter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.serializeBinaryToWriter
    );
  }
};


/**
 * optional StatisticalMeterWatt meter = 1;
 * @return {?proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.prototype.getMeter = function() {
  return /** @type{?proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt} */ (
    jspb.Message.getWrapperField(this, proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt, 1));
};


/**
 * @param {?proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse} returns this
*/
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.prototype.setMeter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.prototype.clearMeter = function() {
  return this.setMeter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.GetStatisticalWattResponse.prototype.hasMeter = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.ListHistoricalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    frames: jspb.Message.getFieldWithDefault(msg, 1, 0),
    granularity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.ListHistoricalRequest}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.ListHistoricalRequest;
  return proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.ListHistoricalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.ListHistoricalRequest}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrames(value);
      break;
    case 2:
      var value = /** @type {!proto.powertrade.powerusage.v1alpha.Granularity} */ (reader.readEnum());
      msg.setGranularity(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.ListHistoricalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrames();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGranularity();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 frames = 1;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.prototype.getFrames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.ListHistoricalRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.prototype.setFrames = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Granularity granularity = 2;
 * @return {!proto.powertrade.powerusage.v1alpha.Granularity}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.prototype.getGranularity = function() {
  return /** @type {!proto.powertrade.powerusage.v1alpha.Granularity} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.Granularity} value
 * @return {!proto.powertrade.powerusage.v1alpha.ListHistoricalRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.prototype.setGranularity = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp start = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.ListHistoricalRequest} returns this
*/
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.ListHistoricalRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalRequest.prototype.hasStart = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.ListHistoricalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metersList: jspb.Message.toObjectList(msg.getMetersList(),
    proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.ListHistoricalResponse}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.ListHistoricalResponse;
  return proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.ListHistoricalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.ListHistoricalResponse}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.deserializeBinaryFromReader);
      msg.addMeters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.ListHistoricalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated HistoricalMeterUsage meters = 1;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage>}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.prototype.getMetersList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage, 1));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage>} value
 * @return {!proto.powertrade.powerusage.v1alpha.ListHistoricalResponse} returns this
*/
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.prototype.setMetersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage}
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.prototype.addMeters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.powertrade.powerusage.v1alpha.HistoricalMeterUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.ListHistoricalResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.ListHistoricalResponse.prototype.clearMetersList = function() {
  return this.setMetersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scale: jspb.Message.getFieldWithDefault(msg, 1, 0),
    start: (f = msg.getStart()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest;
  return proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.powertrade.powerusage.v1alpha.Scale} */ (reader.readEnum());
      msg.setScale(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScale();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional Scale scale = 1;
 * @return {!proto.powertrade.powerusage.v1alpha.Scale}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.prototype.getScale = function() {
  return /** @type {!proto.powertrade.powerusage.v1alpha.Scale} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.Scale} value
 * @return {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.prototype.setScale = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp start = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.prototype.getStart = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest} returns this
*/
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattRequest.prototype.hasStart = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    meterList: jspb.Message.toObjectList(msg.getMeterList(),
    proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse;
  return proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.deserializeBinaryFromReader);
      msg.addMeter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StatisticalMeterWatt meter = 1;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt>}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.prototype.getMeterList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt, 1));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt>} value
 * @return {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse} returns this
*/
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.prototype.setMeterList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt}
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.prototype.addMeter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.powertrade.powerusage.v1alpha.StatisticalMeterWatt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.ListStatisticalWattResponse.prototype.clearMeterList = function() {
  return this.setMeterList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.GetRealtimeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.GetRealtimeRequest}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.GetRealtimeRequest;
  return proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.GetRealtimeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.GetRealtimeRequest}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.GetRealtimeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetRealtimeRequest} returns this
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.GetRealtimeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    meter: (f = msg.getMeter()) && proto.powertrade.powerusage.v1alpha.MeterUsage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.GetRealtimeResponse}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.GetRealtimeResponse;
  return proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.GetRealtimeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.GetRealtimeResponse}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequenceNumber(value);
      break;
    case 2:
      var value = new proto.powertrade.powerusage.v1alpha.MeterUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.MeterUsage.deserializeBinaryFromReader);
      msg.setMeter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.GetRealtimeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMeter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.powertrade.powerusage.v1alpha.MeterUsage.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 sequence_number = 1;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetRealtimeResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MeterUsage meter = 2;
 * @return {?proto.powertrade.powerusage.v1alpha.MeterUsage}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.prototype.getMeter = function() {
  return /** @type{?proto.powertrade.powerusage.v1alpha.MeterUsage} */ (
    jspb.Message.getWrapperField(this, proto.powertrade.powerusage.v1alpha.MeterUsage, 2));
};


/**
 * @param {?proto.powertrade.powerusage.v1alpha.MeterUsage|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetRealtimeResponse} returns this
*/
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.prototype.setMeter = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.GetRealtimeResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.prototype.clearMeter = function() {
  return this.setMeter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.GetRealtimeResponse.prototype.hasMeter = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.ListRealtimeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.ListRealtimeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.ListRealtimeRequest}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.ListRealtimeRequest;
  return proto.powertrade.powerusage.v1alpha.ListRealtimeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.ListRealtimeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.ListRealtimeRequest}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.ListRealtimeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.ListRealtimeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.ListRealtimeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    metersList: jspb.Message.toObjectList(msg.getMetersList(),
    proto.powertrade.powerusage.v1alpha.MeterUsage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.ListRealtimeResponse}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.ListRealtimeResponse;
  return proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.ListRealtimeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.ListRealtimeResponse}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequenceNumber(value);
      break;
    case 2:
      var value = new proto.powertrade.powerusage.v1alpha.MeterUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.MeterUsage.deserializeBinaryFromReader);
      msg.addMeters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.ListRealtimeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMetersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.powertrade.powerusage.v1alpha.MeterUsage.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 sequence_number = 1;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.ListRealtimeResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MeterUsage meters = 2;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.MeterUsage>}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.prototype.getMetersList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.MeterUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.MeterUsage, 2));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.MeterUsage>} value
 * @return {!proto.powertrade.powerusage.v1alpha.ListRealtimeResponse} returns this
*/
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.prototype.setMetersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.MeterUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage}
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.prototype.addMeters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.powertrade.powerusage.v1alpha.MeterUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.ListRealtimeResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.ListRealtimeResponse.prototype.clearMetersList = function() {
  return this.setMetersList([]);
};


/**
 * @enum {number}
 */
proto.powertrade.powerusage.v1alpha.Granularity = {
  GRANULARITY_UNSPECIFIED: 0,
  GRANULARITY_SECOND: 1,
  GRANULARITY_MINUTE: 2,
  GRANULARITY_HOUR: 3
};

/**
 * @enum {number}
 */
proto.powertrade.powerusage.v1alpha.Scale = {
  SCALE_UNSPECIFIED: 0,
  SCALE_DAY: 1,
  SCALE_WEEK: 2,
  SCALE_MONTH: 3,
  SCALE_YEAR: 4
};

goog.object.extend(exports, proto.powertrade.powerusage.v1alpha);

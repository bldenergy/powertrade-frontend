// source: powertrade/powerusage/v1alpha/powerusage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_api_field_behavior_pb = require('../../../google/api/field_behavior_pb.js');
goog.object.extend(proto, google_api_field_behavior_pb);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.ChannelUsage', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.DeviceUsage', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse', null, global);
goog.exportSymbol('proto.powertrade.powerusage.v1alpha.MeterUsage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.DeviceUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.DeviceUsage.displayName = 'proto.powertrade.powerusage.v1alpha.DeviceUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.ChannelUsage.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.ChannelUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.ChannelUsage.displayName = 'proto.powertrade.powerusage.v1alpha.ChannelUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.MeterUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.MeterUsage.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.MeterUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.MeterUsage.displayName = 'proto.powertrade.powerusage.v1alpha.MeterUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest.displayName = 'proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.displayName = 'proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest.displayName = 'proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.repeatedFields_, null);
};
goog.inherits(proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.displayName = 'proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.DeviceUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.DeviceUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    watt: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.DeviceUsage}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.DeviceUsage;
  return proto.powertrade.powerusage.v1alpha.DeviceUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.DeviceUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.DeviceUsage}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWatt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.DeviceUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.DeviceUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWatt();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.DeviceUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float watt = 2;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.getWatt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.DeviceUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.DeviceUsage.prototype.setWatt = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.ChannelUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.ChannelUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0),
    alias: jspb.Message.getFieldWithDefault(msg, 2, ""),
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.powertrade.powerusage.v1alpha.DeviceUsage.toObject, includeInstance),
    watt: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.ChannelUsage;
  return proto.powertrade.powerusage.v1alpha.ChannelUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.ChannelUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 3:
      var value = new proto.powertrade.powerusage.v1alpha.DeviceUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.DeviceUsage.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWatt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.ChannelUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.ChannelUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.powertrade.powerusage.v1alpha.DeviceUsage.serializeBinaryToWriter
    );
  }
  f = message.getWatt();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string alias = 2;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated DeviceUsage devices = 3;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.DeviceUsage>}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.DeviceUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.DeviceUsage, 3));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.DeviceUsage>} value
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage} returns this
*/
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.setDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.DeviceUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.DeviceUsage}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.powertrade.powerusage.v1alpha.DeviceUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};


/**
 * optional float watt = 4;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.getWatt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.ChannelUsage.prototype.setWatt = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.MeterUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.MeterUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    voltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    frequency: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    proto.powertrade.powerusage.v1alpha.ChannelUsage.toObject, includeInstance),
    watt: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    epoch: (f = msg.getEpoch()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.MeterUsage;
  return proto.powertrade.powerusage.v1alpha.MeterUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.MeterUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFrequency(value);
      break;
    case 6:
      var value = new proto.powertrade.powerusage.v1alpha.ChannelUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.ChannelUsage.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWatt(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.MeterUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.MeterUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.powertrade.powerusage.v1alpha.ChannelUsage.serializeBinaryToWriter
    );
  }
  f = message.getWatt();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getEpoch();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float voltage = 4;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float frequency = 5;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setFrequency = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * repeated ChannelUsage channels = 6;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.ChannelUsage>}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.ChannelUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.ChannelUsage, 6));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.ChannelUsage>} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
*/
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.ChannelUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.ChannelUsage}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.powertrade.powerusage.v1alpha.ChannelUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.clearChannelsList = function() {
  return this.setChannelsList([]);
};


/**
 * optional float watt = 7;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getWatt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setWatt = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp epoch = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.getEpoch = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
*/
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.setEpoch = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage} returns this
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.clearEpoch = function() {
  return this.setEpoch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.powertrade.powerusage.v1alpha.MeterUsage.prototype.hasEpoch = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest}
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest;
  return proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest}
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metersList: jspb.Message.toObjectList(msg.getMetersList(),
    proto.powertrade.powerusage.v1alpha.MeterUsage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse}
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse;
  return proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse}
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.powertrade.powerusage.v1alpha.MeterUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.MeterUsage.deserializeBinaryFromReader);
      msg.addMeters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.powertrade.powerusage.v1alpha.MeterUsage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MeterUsage meters = 1;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.MeterUsage>}
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.prototype.getMetersList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.MeterUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.MeterUsage, 1));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.MeterUsage>} value
 * @return {!proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse} returns this
*/
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.prototype.setMetersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.MeterUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage}
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.prototype.addMeters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.powertrade.powerusage.v1alpha.MeterUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.GetPowerUsageResponse.prototype.clearMetersList = function() {
  return this.setMetersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest;
  return proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequenceNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    metersList: jspb.Message.toObjectList(msg.getMetersList(),
    proto.powertrade.powerusage.v1alpha.MeterUsage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse;
  return proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequenceNumber(value);
      break;
    case 2:
      var value = new proto.powertrade.powerusage.v1alpha.MeterUsage;
      reader.readMessage(value,proto.powertrade.powerusage.v1alpha.MeterUsage.deserializeBinaryFromReader);
      msg.addMeters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequenceNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMetersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.powertrade.powerusage.v1alpha.MeterUsage.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 sequence_number = 1;
 * @return {number}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.prototype.getSequenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.prototype.setSequenceNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated MeterUsage meters = 2;
 * @return {!Array<!proto.powertrade.powerusage.v1alpha.MeterUsage>}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.prototype.getMetersList = function() {
  return /** @type{!Array<!proto.powertrade.powerusage.v1alpha.MeterUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.powertrade.powerusage.v1alpha.MeterUsage, 2));
};


/**
 * @param {!Array<!proto.powertrade.powerusage.v1alpha.MeterUsage>} value
 * @return {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse} returns this
*/
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.prototype.setMetersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.powertrade.powerusage.v1alpha.MeterUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.powertrade.powerusage.v1alpha.MeterUsage}
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.prototype.addMeters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.powertrade.powerusage.v1alpha.MeterUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse} returns this
 */
proto.powertrade.powerusage.v1alpha.Get60TicksPowerUsageResponse.prototype.clearMetersList = function() {
  return this.setMetersList([]);
};


goog.object.extend(exports, proto.powertrade.powerusage.v1alpha);
